Build an API to create datasets in Microsoft Server

1. Define a connection to an MS SQL server in the Azure Docker (use .NET)
installed sql server ->
dotnet add package microsoft.data.sqlclient

installed entity framework ->
dotnet add package microsoft.entityframeworkcore

if you want to add dapper later->
dotnet add package Dapper 

test entity framework's ability to create database tables 

installed configuration and configuration json->
dotnet add package microsoft.extensions.configuration microsoft.extensions.configuration.json

appsettings.json added to '/olympic-insights/bin/Debug/net8.0/appsettings.json' to be seen by entity framework

entity framework ->
source of truth - model
code first approach (recommended for ef)

to do
âˆš 1. New SQL container called 'olympic_history' or 'olympics_data' with Microsoft SQL server installed. 

Create and Run a container for the Image:
docker run -e "ACCEPT_EULA=1" -e "MSSQL_USER=SA" -e "MSSQL_SA_PASSWORD=SQLConnect1" -e "MSSQL_PID=Developer" -p 1433:1433 -d --name=sql_connect mcr.microsoft.com/azure-sql-edge

breakdown:
-e "ACCEPT_EULA=1"  -> accept license agreement
-e "MSSQL_USER=SA" -e "MSSQL_SA_PASSWORD=SQLConnect1"  -> set username and password
-e "MSSQL_PID=Developer" -> set type of database
-p 1433:1433 -> set port
-d --name=sql_connect mcr.microsoft.com/azure-sql-edge -> set name

2. Create a database in the container using EF (model as source of truth, code first)
- when successful, you'll see an empty table of athletes

breakdown:
1. create a class that extends db context
2. install the extension for the database you want to use (e.g. 
dotnet add package Microsoft.EntityFrameworkCore.SqlServer)



